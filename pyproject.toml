[project]
name = "dynamically_gated_similarities"
version = "0.0.2"
authors = [
    { name = "Martin Steinborn", email = "martin.steinborn@stud.tu-darmstadt.de" },
]
description = "Code for Paper \"Tracking with Dynamically Gated Similarities\""
readme = "README.rst"
requires-python = ">=3.10"
license = { text = "MIT" }
classifiers = [
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Typing :: Typed",
    "Development Status :: 2 - Pre-Alpha",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]
dynamic = ["dependencies"]

# ########## #
# SETUPTOOLS #
# ########## #

[tool.setuptools]
py-modules = ["dgs"]

[tool.setuptools.dynamic]

[tool.setuptools.dynamic.optional-dependencies]
test = { file = ["./tests/requirements_test.txt"] }
docs = { file = ["./docs/requirements_docs.txt"] }

[project.urls]
Documentation = "https://bmmtstb.github.io/dynamically-gated-similarities/"
Source = "https://github.com/bmmtstb/dynamically-gated-similarities"

# ##### #
# BLACK #
# ##### #

[tool.black]
line-length = 120  # equal to .pylintrc
target-version = ['py310']
include = '\.pyi?$'
force-exclude = '''
/(
      dependencies
    | data
    | .*/venv/
)/
'''

# ######## #
# COVERAGE #
# ######## #

[tool.coverage.run]
branch = true
data_file = ".coverage"
source = ["dgs"]
omit = [
    "*/backbone/*", # fixme either remove backbone entirely or get it fully working...
    "*/utils/torchtools.py",  # copied from torchreid
    "tracker_api.py",  # will only contain default tracker which cant really be tested without data
]

[tool.coverage.paths]
source = ["dgs", "tests"]

[tool.coverage.report]
fail_under = 60  # fixme target is 80
skip_covered = true
skip_empty = true
ignore_errors = true
omit = [# files
    "*/backbone/*", # fixme either remove backbone entirely or get it fully working...
    "*/utils/torchtools.py",  # copied from torchreid
]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__", # string representation of objects
    "self.print\\(", # BaseModule.print() is mostly debug printing, shouldn't be tested

    # Don't complain if tests don't hit defensive assertion code:
    "assert ",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage/coverage_html_report"

[tool.coverage.xml]
output = "coverage/coverage.xml"
